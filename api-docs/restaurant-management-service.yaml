openapi: 3.0.0
info:
  title: Restaurant Management Service API
  version: 1.0.0

servers:
  - url: http://localhost:8083

paths:
  # Управление ресторанами
  /api/management/restaurants:
    post:
      summary: Создать ресторан (только ADMIN)
      parameters:
        - name: X-User-Roles
          in: header
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                address: {type: string}
                cuisineType: {type: string}
                managerId: {type: string}
      responses:
        '201': {description: Created}

    get:
      summary: Получить мои рестораны (для MANAGER)
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Restaurant'}

  /api/management/restaurants/{restaurantId}:
    put:
      summary: Обновить ресторан
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                address: {type: string}
      responses:
        '200': {description: OK}

  # Управление меню
  /api/management/restaurants/{restaurantId}/menu-items:
    post:
      summary: Добавить блюдо в меню
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                description: {type: string}
                price: {type: number}
                category: {type: string}
      responses:
        '201': {description: Created}

    get:
      summary: Получить меню ресторана
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/MenuItem'}

  /api/management/restaurants/{restaurantId}/menu-items/{itemId}:
    put:
      summary: Обновить блюдо
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: {type: string}
                price: {type: number}
                isAvailable: {type: boolean}
      responses:
        '200': {description: OK}

    delete:
      summary: Удалить блюдо из меню
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema: {type: string}
      responses:
        '200': {description: OK}

  # Внутренний эндпоинт для Catalog Service
  /api/internal/restaurants/{restaurantId}:
    get:
      summary: Получить данные ресторана (для Catalog Service)
      responses:
        '200':
          description:
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Restaurant'}

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id: {type: string}
        name: {type: string}
        address: {type: string}
        cuisineType: {type: string}
        managerId: {type: string}

    MenuItem:
      type: object
      properties:
        id: {type: string}
        name: {type: string}
        description: {type: string}
        price: {type: number}
        category: {type: string}
        isAvailable: {type: boolean}